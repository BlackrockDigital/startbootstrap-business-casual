// if you are using gulp 4, rename the gulpfile.js to gulpfile.js.3 and rename this file gulpfile.js

var gulp = require('gulp');
var sass = require('gulp-sass');
var header = require('gulp-header');
var cleanCSS = require('gulp-clean-css');
var rename = require("gulp-rename");
var autoprefixer = require('gulp-autoprefixer');
var pkg = require('./package.json');
var browserSync = require('browser-sync').create();

// Set the banner content
var banner = ['/*!\n',
  ' * Start Bootstrap - <%= pkg.title %> v<%= pkg.version %> (<%= pkg.homepage %>)\n',
  ' * Copyright 2013-' + (new Date()).getFullYear(), ' <%= pkg.author %>\n',
  ' * Licensed under <%= pkg.license %> (https://github.com/BlackrockDigital/<%= pkg.name %>/blob/master/LICENSE)\n',
  ' */\n',
  '\n'
].join('');

// Copy third party libraries from /node_modules into /vendor
gulp.task('vendor', function() {

  // Bootstrap
  gulp.src([
      './node_modules/bootstrap/dist/**/*',
      '!./node_modules/bootstrap/dist/css/bootstrap-grid*',
      '!./node_modules/bootstrap/dist/css/bootstrap-reboot*'
    ])
    .pipe(gulp.dest('./vendor/bootstrap'))

  // jQuery
  gulp.src([
      './node_modules/jquery/dist/*',
      '!./node_modules/jquery/dist/core.js'
    ])
    .pipe(gulp.dest('./vendor/jquery'))

   
});

// Compile SCSS
gulp.task('css:compile', function() {
  return gulp.src('./scss/**/*.scss')
    .pipe(sass.sync({
      outputStyle: 'expanded'
    }).on('error', sass.logError))
    .pipe(autoprefixer({
      browsers: ['last 2 versions'],
      cascade: false
    }))
    .pipe(header(banner, {
      pkg: pkg
    }))
	.pipe(gulp.dest('./css'))
        done();
});

// Minify CSS

gulp.task('css:minify', gulp.series('css:compile', function() {
  return gulp.src([
      './css/*.css',
      '!./css/*.min.css'
    ])
    .pipe(cleanCSS())
    .pipe(rename({
      suffix: '.min'
    }))
    .pipe(gulp.dest('./css'))
	.pipe(browserSync.stream());
        done();
 }));

// CSS
gulp.task('css', gulp.parallel('css:compile', 'css:minify'));

// Default task
gulp.task('default', gulp.parallel( 'css', 'vendor' ));

// Configure the browserSync task
gulp.task( 'browserSync', function(done) {
    console.log("Init browser start");
  browserSync.init({
    server: {
      baseDir: "./"
    }
  });
    console.log("Init browser end");
    done();
});

	   // Dev task
gulp.task('dev', gulp.series('browserSync',  function() {

    console.log("a");
    var wats = gulp.watch('./scss/*.scss', gulp.series('css'));
        console.log("b");
    var watb = gulp.watch('./*.html', gulp.series( function(done) { browserSync.reload(); done();} ));
			  console.log("c");
			 
}));

